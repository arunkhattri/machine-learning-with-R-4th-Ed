#+title: Introducing Machine Learning

* R data structures

** Vectors
The fundamental R data structure is the *vector*, which stores an ordered set of values called *elements*.
*** Characteristics
+ can contain any number of elements.
+ elements must be of same type.
*** vector types:
+ integer - numbers without decimal
+ double - numbers with decimal
+ character - text data
+ logical - ~TRUE~ or ~FALSE~ values

  some R functions will report both ~integer~ and ~double~ vectors as ~numeric~.
*** Examples:

let's construct a set of vectors containing data on five football players.

#+begin_src R :session *r-session* :results output :exports code
players <- c("mbappe", "messi", "giroud", "morata", "saka")
country <- c("france", "argentina", "france", "spain", "england")
goals <- c(5, 4, 4, 3, 3)
in_sf <- c(TRUE, TRUE, TRUE, FALSE, FALSE)
#+end_src

#+RESULTS:

values stored in R vectors retain their order.
obtain the 2nd player:

#+begin_src R :session *r-session* :results output :exports both
players[2]
#+end_src

#+RESULTS:
: [1] "messi"

to extract data from vectors, colon operator can be used :

#+begin_src R :session *r-session* :results output :exports both
country[2:4]
#+end_src

#+RESULTS:
: [1] "argentina" "france"    "spain"

items  can be excluded by specifying a negative item number.

#+begin_src R :session *r-session* :results output :exports both
players[-3]
#+end_src

#+RESULTS:
: [1] "mbappe" "messi"  "morata" "saka"

using logical vector to indicate include or exclude an item:

#+begin_src R :session *r-session* :results output :exports both
country[c(FALSE, TRUE, TRUE, TRUE, FALSE)]
#+end_src

#+RESULTS:
: [1] "argentina" "france"    "spain"

Above example acts like a filter, to use it more effectively:

#+begin_src R :session *r-session* :results output :exports both
golden_boot <- goals >= 4
players[golden_boot]
#+end_src

#+RESULTS:
: [1] "mbappe" "messi"  "giroud"

** Factors
A special type of vector that is solely used for representing categorical or ordinal data.

#+begin_src R :session *r-session* :results output :exports both
gender <- factor(c('male', 'female', 'male'))
gender
#+end_src

#+RESULTS:
: [1] male   female male
: Levels: female male

When we create factors, we can add additional levels that may not appear in the original data.

#+begin_src R :session *r-session* :results output :exports both
blood <- factor(c("O", "AB", "A"),
                levels = c("A", "B", "AB", "O"))
blood
#+end_src

#+RESULTS:
: [1] O  AB A
: Levels: A B AB O

factor also allows to create ordinal data. We indicate the presence of ordinal data by providing the factor's levels in the desired order (lowest to highest), and setting the ~ordered~ parameter to ~TRUE~:

#+begin_src R :session *r-session* :results output :exports both
aqi_category <- factor(c("poor", "good", "moderate", "satisfactory"),
                       levels = c("poor", "moderate", "satisfactory", "good"),
                       ordered = TRUE)
aqi_category
#+end_src

#+RESULTS:
: [1] poor         good         moderate     satisfactory
: Levels: poor < moderate < satisfactory < good

** Lists
Much like a vector, however a list allows different R data types to be collected.
Suppose we wanted to display, all the data for first player, we need to multiple commands:

#+begin_src R :session *r-session* :results output :exports both
players[1]

#+end_src

#+RESULTS:
: [1] "mbappe"

#+begin_src R :session *r-session* :results output :exports both
goals[1]
#+end_src

#+RESULTS:
: [1] 5

#+begin_src R :session *r-session* :results output :exports both
country[1]
#+end_src

#+RESULTS:
: [1] "france"

#+begin_src R :session *r-session* :results output :exports both
in_sf[1]
#+end_src

#+RESULTS:
: [1] TRUE

a list allows us to group all of these values into one object we can use repeatedly:

#+begin_src R :session *r-session* :results output :exports both
subject_1 <- list(
  lastname = players[1],
  goal_scored = goals[1],
  country = country[1],
  sf = in_sf[1]
)
subject_1
#+end_src

#+RESULTS:
#+begin_example
$lastname
[1] "mbappe"

$goal_scored
[1] 5

$country
[1] "france"

$sf
[1] TRUE
#+end_example

its components can be accessed using numeric positions:

#+begin_src R :session *r-session* :results output :exports both
subject_1[3]
#+end_src

#+RESULTS:
: $country
: [1] "france"

The result of using vector-style operators on a list object is another list object, which is a subset of the original list.
To instead return a single list item in its native data type, use double brackets. for e.g. -

#+begin_src R :session *r-session* :results output :exports both
subject_1[[3]]
#+end_src

#+RESULTS:
: [1] "france"

for clarity, it's better to access list components by name -

#+begin_src R :session *r-session* :results output :exports both
subject_1$country
#+end_src

#+RESULTS:
: [1] "france"

** Data frames
By far the most important data structure utilized in machine learning.
Let's create a data frame for our player dataset.

#+begin_src R :session *r-session* :results output :exports both
pl_data <- data.frame(players, country, goals, in_sf)
pl_data
#+end_src

#+RESULTS:
:   players   country goals in_sf
: 1  mbappe    france     5  TRUE
: 2   messi argentina     4  TRUE
: 3  giroud    france     4  TRUE
: 4  morata     spain     3 FALSE
: 5    saka   england     3 FALSE

to extract entire column -

#+begin_src R :session *r-session* :results output :exports both
pl_data$players
#+end_src

#+RESULTS:
: [1] "mbappe" "messi"  "giroud" "morata" "saka"

let's create patient data from scratch -

#+begin_src R :session *r-session* :results output :exports both
subject_name <- c("John Doe", "Jane Doe", "Bill Gates")
temp <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
gender <- factor(c("male", "female", "male"))
blood <- factor(c("O", "AB", "A"), levels = c("A", "B", "AB", "O"))
symptoms <- factor(c("normal", "mild", "severe"),
                   levels = c("normal", "mild", "severe", "serious"),
                   ordered = TRUE)
patient_data <- data.frame(subject_name, temp, flu_status,
                           gender, blood, symptoms)
patient_data
#+end_src

#+RESULTS:
:   subject_name  temp flu_status gender blood symptoms
: 1     John Doe  98.1      FALSE   male     O   normal
: 2     Jane Doe  98.6      FALSE female    AB     mild
: 3   Bill Gates 101.4       TRUE   male     A   severe

create new column for temperature in celsius -

#+begin_src R :session *r-session* :results output :exports both
patient_data$temp_c <- (patient_data$temp - 32) * (5/9)
# get temp and temp_c columns only
patient_data[c("temp", "temp_c")]
#+end_src

#+RESULTS:
:    temp   temp_c
: 1  98.1 36.72222
: 2  98.6 37.00000
: 3 101.4 38.55556

** Matrices and arrays

A matrix is a data structure that represents a 2-D table with rows and columns of data.
R matrices can contain only one type of data.

#+begin_src R :session *r-session* :results output :exports both
m <- matrix(seq(1, 4), nrow = 2)
m
#+end_src

#+RESULTS:
:      [,1] [,2]
: [1,]    1    3
: [2,]    2    4

by defaults numbers are populated by columns, see what happens if we populate it by row.

#+begin_src R :session *r-session* :results output :exports both
m_2 <- matrix(seq(1, 6), ncol = 3, byrow = TRUE)
m_2
#+end_src

#+RESULTS:
:      [,1] [,2] [,3]
: [1,]    1    2    3
: [2,]    4    5    6

* Managing data with R

** Saving, loading, and removing R data structures

*** ~.RData~ or ~.rda~ extension
suppose you had 3 objects named ~x~, ~y~ and ~z~ that you would like to save to a permanent file. To save them to a file named ~mydata.RData~ -

#+begin_example
save(x, y, z, file = "mydata.RData")
#+end_example

the ~load()~ command can recreate any data structures that have been saved to an ~.RData~ file. to load the previously saved file -

#+begin_example
load("mydata.RData")
#+end_example

*** ~.rds
Alternatively, the ~saveRDS()~ function can be used to save a single R object to a file. Although it is much like the ~save()~ function, a key distinction is that the corresponding ~loadRDS()~ function allows the object to be loaded with a different name than the original object.

To save a model object named ~my_model~ to a file named ~my_model.rds~ -

#+begin_example
saveRDS(my_model, file = "my_model.rds")
#+end_example

To load the model -

#+begin_example
my_model <- readRDS("my_model.rds")
#+end_example

*** ~ls()~

Returns a vector of all data structures currently in memory.

*** ~rm()~

To remove object ~m~ from memory -

#+begin_example
rm(m)
#+end_example

To remove entire R session -

#+begin_example
rm(list = ls())
#+end_example

* Exploring and understanding data

** Exploring the structure of data
loading the ~usedcars.csv~ dataset and looking at structure of R objects -

#+begin_src R :session *r-session* :results output :exports both
used_cars <- read.csv("./data/usedcars.csv")
str(used_cars)
#+end_src

#+RESULTS:
: 'data.frame':	150 obs. of  6 variables:
:  $ year        : int  2011 2011 2011 2011 2012 2010 2011 2010 2011 2010 ...
:  $ model       : chr  "SEL" "SEL" "SEL" "SEL" ...
:  $ price       : int  21992 20995 19995 17809 17500 17495 17000 16995 16995 16995 ...
:  $ mileage     : int  7413 10926 7351 11613 8367 25125 27393 21026 32655 36116 ...
:  $ color       : chr  "Yellow" "Gray" "Silver" "Gray" ...
:  $ transmission: chr  "AUTO" "AUTO" "AUTO" "AUTO" ...

It provides a wealth of information about the dataset.

** Exploring numeric features

Employing a common set of measurements for describing values known as *summary statistics* -

#+begin_src R :session *r-session* :results output :exports both
summary(used_cars$year)
#+end_src

#+RESULTS:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
:    2000    2008    2009    2009    2010    2012

By supplying a vector of column names, we can also use the ~summary()~ function to obtain summary statistics for several numeric columns simultaneously -

#+begin_src R :session *r-session* :results output :exports both
summary(used_cars[c("price", "mileage")])
#+end_src

#+RESULTS:
:      price          mileage
:  Min.   : 3800   Min.   :  4867
:  1st Qu.:10995   1st Qu.: 27200
:  Median :13592   Median : 36385
:  Mean   :12962   Mean   : 44261
:  3rd Qu.:14904   3rd Qu.: 55124
:  Max.   :21992   Max.   :151479

** Visualizing numeric features
*** Boxplots

#+begin_src R :session *r-session* :file boxplot.png :results graphics file :exports both
boxplot(used_cars$price, main = "Boxplot of Used Car Prices",
        ylab = "Price ($)")
#+end_src

#+RESULTS:
[[file:boxplot.png]]
